//i18n
angular.module('app', ['pascalprecht.translate'])

.config(['$translateProvider', function($translateProvider){

  // Adding a translation table for the English language
  $translateProvider.translations('en_US', {
    "TITLE"     : "How to use",
    "HEADER"    : "You can translate texts by using a filter.",
    "SUBHEADER" : "And if you don't like filters, you can use a directive.",
    "HTML_KEYS" : "If you don't like an empty elements, you can write a key for the translation as an inner HTML of the directive.",
    "DATA_TO_FILTER"    : "Your translations might also contain any static ({{staticValue}}) or random ({{randomValue}}) values, which are taken directly from the model.",
    "DATA_TO_DIRECTIVE" : "And it's no matter if you use filter or directive: static is still {{staticValue}} and random is still {{randomValue}}.",
    "RAW_TO_FILTER"     : "In case you want to pass a {{type}} data to the filter, you have only to pass it as a filter parameter.",
    "RAW_TO_DIRECTIVE"  : "This trick also works for {{type}} with a small mods.",
    "SERVICE"        : "Of course, you can translate your strings directly in the js code by using a $translate service.",
    "SERVICE_PARAMS" : "And you are still able to pass params to the texts. Static = {{staticValue}}, random = {{randomValue}}."
  });

  // Adding a translation table for the Russian language
  $translateProvider.translations('ru_RU', {
    "TITLE"     : "Как пользоваться",
    "HEADER"    : "Вы можете переводить тексты при помощи фильтра.",
    "SUBHEADER" : "А если Вам не нравятся фильтры, Вы можете воспользоваться директивой.",
    "HTML_KEYS" : "Если вам не нравятся пустые элементы, Вы можете записать ключ для перевода в как внутренний HTML директивы.",
    "DATA_TO_FILTER"    : "Ваши переводы также могут содержать любые статичные ({{staticValue}}) или случайные ({{randomValue}}) значения, которые берутся прямо из модели.",
    "DATA_TO_DIRECTIVE" : "И совершенно не важно используете ли Вы фильтр или директиву: статическое значение по прежнему {{staticValue}} и случайное - {{randomValue}}.",
    "RAW_TO_FILTER"     : "Если вы хотите передать \"сырые\" ({{type}}) данные фильтру, Вам всего лишь нужно передать их фильтру в качестве параметров.",
    "RAW_TO_DIRECTIVE"  : "Это также работает и для директив ({{type}}) с небольшими модификациями.",
    "SERVICE"        : "Конечно, Вы можете переводить ваши строки прямо в js коде при помощи сервиса $translate.",
    "SERVICE_PARAMS" : "И вы все еще можете передавать параметры в тексты. Статическое значение = {{staticValue}}, случайное = {{randomValue}}."
  });

  // Tell the module what language to use by default
  $translateProvider.preferredLanguage('en_US');

}])

.controller('InvoiceController', ['$scope', '$translate', function($scope, $translate) {

  $scope.tlData = {
    staticValue : 42,
    randomValue : Math.floor(Math.random() * 1000)
  };

  $scope.jsTrSimple = $translate('SERVICE');
  $scope.jsTrParams = $translate('SERVICE_PARAMS', $scope.tlData);

  $scope.setLang = function(langKey) {
    // You can change the language during runtime
    $translate.uses(langKey);

    // A data generated by the script have to be regenerated
    $scope.jsTrSimple = $translate('SERVICE');
    $scope.jsTrParams = $translate('SERVICE_PARAMS', $scope.tlData);
  };

}]);






// format Address Google Address Autofill and merge Inputs document-inputs-googlesearch of Google Search Result to one Textarea
function Country() {
	var gStreetNo = $('textarea#street_number').val();
	var gStreet = $('textarea#route').val();
	var gCity = $('textarea#locality').val();
	var gArea1 = $('textarea#administrative_area_level_1').val();
	var gZip = $('textarea#postal_code').val();
	var gCountry = $('textarea#country').val();
	// USA Format
	if (gCountry == "Deutschland") {

		$("#document-to").val(gStreet + " " + gStreetNo + "\n" + gZip + " " + gCity);
	} else {
		// others for e.g. Germany
		$("#document-to").val(gStreetNo + " " + gStreet + "\n" + gCity + "\n" + gArea1 + " " + gZip + "\n" + gCountry);
	}
}

// calculation USA

$("#document-table tbody input, #discount, #tax, .shipping-total").on("change", function() {
	
	// replace comma with dot if user inputs comma
	
	$("#document-table tbody input, #discount, #tax, .shipping-total").each(function() {
    $(this).val($(this).val().replace(/,/g, "."));
  });

	// calculate rows
	$('#document-table tbody tr').each(function() {
		var quantity = $(this).find('input.quantity').val();
		var unitprice = $(this).find('input.unitprice').val();
		var amountTotal = (quantity * unitprice);
		$(this).find('input.grossprice').val(amountTotal);
		$('input.grossprice').val(amountTotal.toFixed(2));
	});
	//END .each

	// calculate subtotals

	var subTotal = 0;
	var amountRows = $(".grossprice");
	$.each(amountRows, function(number) {
		subTotal += parseInt($(this).val());
	});

	$('input.sub-total').val(subTotal.toFixed(2));

	// calculate discount

	var discount = 0;
	var percentage = $('#discount').val();

	var discount = subTotal * (percentage / 100);
	$('input.discount-total').val(-discount.toFixed(2));

	// get shipping costs
	var shippingcosts = $('.shipping-total').val();

	// calculate balance
	var balance = 0;

	balance = Number(subTotal) + Number(-discount) + Number(shippingcosts);

	//$('input.balance').val(balance);
	
	$('input.balance').val(balance.toFixed(2));

	return false;
});
